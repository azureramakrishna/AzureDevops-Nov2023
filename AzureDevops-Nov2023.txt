WHY IAC (Infrastructure as a code):  ARMTemplates & Terraform
----------------------------------
- Automated way of deploying your resources

1 VM --> 5min 
100 VM --> 

code -> 1 click of button 


Sandeep - DEV   (left org)
Shanmukhi - test and Prod

- Repeatable (Reusable)

- Preductable

Introduction to JSON:
--------------------

ARM Templates structure:

{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "",
  "parameters": { },
  "variables": { },
  "resources": [ ], 
  "outputs": { }
}

Write a storage account ARMTemplate:

Pre-requisites:
1. Install VSCode
2. Azure Resource Manager tools extension 

Deploy the ARMTemplate using CLI:
--------------------------------

az group create --name arm-vscode --location eastus

az deployment group create --resource-group vscode-group --template-file template.json --parameters parameters.json

Deploy the ARMTemplate using Powershell:
---------------------------------------
New-AzResourceGroup -Name arm-vscode -Location eastus

New-AzResourceGroupDeployment -ResourceGroupName arm-vscode -TemplateFile ./azuredeploy.json -TemplateParameterFile ./azuredeploy.parameters.json


Multiresource creation:
----------------------
copyindex()

HelperFunctions:
---------------
toLower
toUpper
DependsOn
Concat
[Resourcegroup().location]
resourceid 
copyindex()


Terraform: Infrastructure as a code (IAC) - Open source 
---------

ARMTemplate																Terraform 
-----------																---------
1. IAC Tool 															1. IAC Tool 
2. Specific to Azure 													2. Open source (Azure, AWS, GCP, OCI, onprem etc)
3. JSON Format 														    3. HCL Language (Hashicorp configuration language)
4. extension .json 														4. extension .tf 
5. template.json 														5. main.tf
	parameters.json															variables.tf 
6. Schema																6. Bulding blocks
	contentVersion															providers
	parameters																resources
	variables																outputs
	resources
	output 
7. Azure Powershell / Azure CLI 										7. Life cycle of terraform 
	New-AzResourceGroupDeployment \											Terraform init
	-ResourceGroupName \													Terraform fmt
	-TemplateFile \															Terraform validate										
	-TemplateParameterFile \												Terraform plan
	-Verbose																Terraform apply
																			Terraform destroy
																			
Getting started with terraform:
------------------------------
1. Install terraform - https://developer.hashicorp.com/terraform/install (1.6.4)
2. Extract the .zip file and copy and past the terraform.exe to C:\Windows
3. Validate the terraform by opening cmd and type terraform 
Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure
4. VSCode --> Install Extensions --> Terraform & Azure Terraform 
5. Terraform providers --> https://registry.terraform.io/browse/providers
		aws - aws 
		azure - azurerm
		gcp - google
6. Azure terraform provider --> https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs



**  0.13
terraform version = 1.6.4
terraform provider version (azurerm) = 3.70.0

terraform init 		--> download provider plugins
terraform fmt		--> format the templates 
terraform validate 	--> validate the terraform configuration 
terraform plan 		-->	Keep the lock to terraform.tfstate file and refresh and provide the plan --> Plan: 2 to add, 0 to change, 0 to destroy.
terraform apply 	-->	Keep the lock to terraform.tfstate file and start deploying the template to targeted environment (azure)
terraform destroy 	--> It will delete the resource under your main.tf file 

terraform.tfstate --> it consist of the deployment state in the JSON format

Data sources: Use data source to access information about an existing resources.
------------
Resource Group
Virtual Network 

new VM 

Authenticate to portal via SPN:
-------------------------------
Client_id: 14651c27-1aad-4251-b759-b208f67cac4a
tenant_id: 459865f1-a8aa-450a-baec-8b47a9e5c904
secret: OxR8Q~EcZ2UvegBB.VFLduuN3frITEvuwaZ.JcgF
subscription_id: 6e4924ab-b00c-468f-ae01-e5d33e8786f8

Azure terraform backend:
------------------------


How to deploy multiple resources:
--------------------------------
	count.index
	
Terraform locals:
----------------
locals {
  project = "saanvikit"
}

saanvikitsa
saanvikit-vm
saanvikit-nsg

Terraform for_each Meta-Argument:
---------------------------------

lower
Upper 
count.index 
for_each 
depends_on 


Terraform Module:
----------------